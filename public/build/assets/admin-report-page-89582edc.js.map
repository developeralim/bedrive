{"version":3,"mappings":"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","names":["Endpoint","useAdminReport","payload","useQuery","fetchAnalyticsReport","keepPreviousData","types","dateRange","params","apiClient","response","FormattedDuration","memo","minutes","seconds","propsMs","propsStartDate","propsEndDate","verbose","addZeroToFirstUnit","isLive","maxIsLiveMs","minDuration","liveInterval","trans","useTrans","initialMs","useMemo","startDate","parseAbsoluteToLocal","getCurrentDateTime","diff","ms","setMs","useState","useEffect","msRef","useRef","overMaxMs","interval","prev","unsignedMs","parsedMS","formattedValue","formatVerbose","formatCompact","jsx","Fragment","t","output","message","addZero","v","value","AdminReportCardRow","report","isLoading","data","ReportCard","Trans","propsIcon","children","type","currentValue","previousValue","percentageChange","colSpan","rowSpan","icon","isValidElement","cloneElement","IconEl","createSvgIconFromTree","jsxs","clsx","AnimatePresence","m","opacityAnimation","Skeleton","FormattedValue","TrendingIndicator","FormattedBytes","FormattedNumber","props","percentage","calculatePercentage","TrendingUpIcon","TrendingFlatIcon","TrendingDownIcon","ChartLayout","title","description","className","contentIsFlex","contentClassName","contentRef","ChartLoadingIndicator","ProgressCircle","LazyChart","lazy","BaseChart","Suspense","formatReportData","localeCode","shareFirstDatasetLabels","firstDatasetLabels","dataset","datasetIndex","datasetItem","itemIndex","label","generateDatasetLabels","datum","granularity","locale","generateTimeLabels","isoDate","isoEndDate","date","endDate","getFormatter","memoize","options","DateFormatter","a","b","shallowEqual","primaryColor","getBootstrapData","ChartColors","LineChartOptions","LineChart","useSelectedLocale","formattedData","i","PolarAreaChartOptions","PolarAreaChart","d","BarChart","direction","individualBarColors","c","isHorizontal","loaderUrl","useGoogleGeoChart","placeholderRef","country","onCountrySelected","analytics","useSettings","apiKey","selectedTheme","useThemeSelector","geoChartRef","regionInteractivity","drawGoogleChart","useCallback","seedData","location","backgroundColor","themeValueToHex","_a","_b","initGoogleGeoChart","lazyLoader","InfoDialogTriggerIcon","createSvgIcon","InfoDialogTrigger","body","dialogSize","DialogTrigger","IconButton","Dialog","DialogHeader","DialogBody","FormattedCountryName","countryCode","regionNames","formattedName","GeoChart","metricData","layoutProps","initialData","InfoTrigger","Button","ArrowBackIcon","VisitorsReportCharts","totalViews","monthDayFormat","ReportDateSelector","onChange","disabled","compactOnMobile","enableCompare","isMobile","useIsMobileMediaQuery","DateRangeIcon","FormattedDateTimeRange","DateFormatPresets","DateSelectorDialog","state","useDateRangePickerState","compareHasInitialValue","compareState","DateRangeComparePresets","DateRangeDialog","Component","setDateRange","DateRangePresets","StaticPageTitle"],"sources":["../../../common/foundation/resources/client/admin/analytics/use-admin-report.ts","../../../common/foundation/resources/client/ui/library/i18n/formatted-duration.tsx","../../../common/foundation/resources/client/admin/analytics/admin-report-card-row.tsx","../../../common/foundation/resources/client/charts/chart-layout.tsx","../../../common/foundation/resources/client/charts/chart-loading-indicator.tsx","../../../common/foundation/resources/client/charts/base-chart.tsx","../../../common/foundation/resources/client/charts/data/format-report-data.ts","../../../common/foundation/resources/client/charts/chart-colors.tsx","../../../common/foundation/resources/client/charts/line-chart.tsx","../../../common/foundation/resources/client/charts/polar-area-chart.tsx","../../../common/foundation/resources/client/charts/bar-chart.tsx","../../../common/foundation/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/foundation/resources/client/ui/library/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/foundation/resources/client/ui/library/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/foundation/resources/client/ui/library/i18n/formatted-country-name.tsx","../../../common/foundation/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/foundation/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/foundation/resources/client/admin/analytics/report-date-selector.tsx","../../../common/foundation/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {keepPreviousData, useQuery} from '@tanstack/react-query';\r\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\r\nimport {apiClient} from '@common/http/query-client';\r\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\r\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {ReactElement} from 'react';\r\nimport {SvgIconProps} from '@ui/icons/svg-icon';\r\nimport {IconTree} from '@ui/icons/create-svg-icon';\r\n\r\nconst Endpoint = 'admin/reports';\r\n\r\nexport interface HeaderCardData {\r\n  icon: IconTree[] | ReactElement<SvgIconProps>;\r\n  name: string;\r\n  type?: 'number' | 'fileSize' | 'percentage';\r\n  currentValue: number;\r\n  previousValue?: number;\r\n  percentageChange?: number;\r\n}\r\n\r\ninterface FetchAnalyticsReportResponse extends BackendResponse {\r\n  visitorsReport: VisitorsReportData;\r\n  headerReport: HeaderCardData[];\r\n}\r\n\r\ninterface Payload {\r\n  types?: ('visitors' | 'header')[];\r\n  dateRange?: DateRangeValue;\r\n}\r\nexport function useAdminReport(payload: Payload = {}) {\r\n  return useQuery({\r\n    queryKey: [Endpoint, payload],\r\n    queryFn: () => fetchAnalyticsReport(payload),\r\n    placeholderData: keepPreviousData,\r\n  });\r\n}\r\n\r\nfunction fetchAnalyticsReport({\r\n  types,\r\n  dateRange,\r\n}: Payload): Promise<FetchAnalyticsReportResponse> {\r\n  const params: Record<string, any> = {};\r\n  if (types) {\r\n    params.types = types.join(',');\r\n  }\r\n  if (dateRange) {\r\n    params.startDate = dateRange.start.toAbsoluteString();\r\n    params.endDate = dateRange.end.toAbsoluteString();\r\n    params.timezone = dateRange.start.timeZone;\r\n  }\r\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\r\n}\r\n","import {Fragment, memo, useEffect, useMemo, useRef, useState} from 'react';\r\nimport {useTrans, UseTransReturn} from '@ui/i18n/use-trans';\r\nimport {message} from '@ui/i18n/message';\r\nimport {parseAbsoluteToLocal} from '@internationalized/date';\r\nimport {getCurrentDateTime} from '@ui/i18n/use-current-date-time';\r\n\r\ninterface ParsedMS {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n}\r\n\r\ninterface FormattedDurationProps {\r\n  ms?: number;\r\n  minutes?: number;\r\n  seconds?: number;\r\n  startDate?: string;\r\n  endDate?: string;\r\n  verbose?: boolean;\r\n  addZeroToFirstUnit?: boolean;\r\n  isLive?: boolean;\r\n  maxIsLiveMs?: number;\r\n  liveInterval?: number;\r\n  minDuration?: number;\r\n}\r\nexport const FormattedDuration = memo(\r\n  ({\r\n    minutes,\r\n    seconds,\r\n    ms: propsMs,\r\n    startDate: propsStartDate,\r\n    endDate: propsEndDate,\r\n    verbose = false,\r\n    addZeroToFirstUnit = true,\r\n    isLive,\r\n    maxIsLiveMs,\r\n    minDuration = 0,\r\n    liveInterval = 5000,\r\n  }: FormattedDurationProps) => {\r\n    const {trans} = useTrans();\r\n\r\n    const initialMs = useMemo(() => {\r\n      if (propsStartDate || propsEndDate) {\r\n        const startDate = propsStartDate\r\n          ? parseAbsoluteToLocal(propsStartDate)\r\n          : getCurrentDateTime();\r\n        const endDate = propsEndDate\r\n          ? parseAbsoluteToLocal(propsEndDate)\r\n          : getCurrentDateTime();\r\n        const diff = endDate.toDate().getTime() - startDate.toDate().getTime();\r\n        return diff > minDuration ? diff : minDuration;\r\n      }\r\n\r\n      if (minutes) {\r\n        return minutes * 60000;\r\n      } else if (seconds) {\r\n        return seconds * 1000;\r\n      }\r\n\r\n      if (!propsMs) {\r\n        return minDuration;\r\n      }\r\n\r\n      return propsMs;\r\n    }, [minutes, seconds, propsMs, propsStartDate, propsEndDate, minDuration]);\r\n\r\n    const [ms, setMs] = useState<number>(initialMs);\r\n\r\n    useEffect(() => {\r\n      setMs(initialMs);\r\n    }, [initialMs]);\r\n\r\n    const msRef = useRef(ms);\r\n    msRef.current = ms;\r\n\r\n    useEffect(() => {\r\n      const overMaxMs = maxIsLiveMs && msRef.current > maxIsLiveMs;\r\n      if (isLive && !overMaxMs) {\r\n        const interval = setInterval(() => {\r\n          setMs(prev => prev + liveInterval);\r\n        }, liveInterval);\r\n        return () => clearInterval(interval);\r\n      }\r\n    }, [isLive, liveInterval, maxIsLiveMs, initialMs]);\r\n\r\n    const unsignedMs = ms < 0 ? -ms : ms;\r\n    const parsedMS: ParsedMS = {\r\n      days: Math.trunc(unsignedMs / 86400000),\r\n      hours: Math.trunc(unsignedMs / 3600000) % 24,\r\n      minutes: Math.trunc(unsignedMs / 60000) % 60,\r\n      seconds: Math.trunc(unsignedMs / 1000) % 60,\r\n    };\r\n\r\n    let formattedValue: string;\r\n    if (verbose) {\r\n      formattedValue = formatVerbose(parsedMS, trans);\r\n    } else {\r\n      formattedValue = formatCompact(parsedMS, addZeroToFirstUnit);\r\n    }\r\n\r\n    return <Fragment>{formattedValue}</Fragment>;\r\n  },\r\n);\r\n\r\nfunction formatVerbose(t: ParsedMS, trans: UseTransReturn['trans']) {\r\n  const output: string[] = [];\r\n\r\n  if (t.days) {\r\n    output.push(`${t.days}${trans(message('d'))}`);\r\n  }\r\n  if (t.hours) {\r\n    output.push(`${t.hours}${trans(message('hr'))}`);\r\n  }\r\n  if (t.minutes) {\r\n    output.push(`${t.minutes}${trans(message('min'))}`);\r\n  }\r\n  if (t.seconds && !t.hours) {\r\n    output.push(`${t.seconds}${trans(message('sec'))}`);\r\n  }\r\n\r\n  return output.join(' ');\r\n}\r\n\r\nfunction formatCompact(t: ParsedMS, addZeroToFirstUnit = true) {\r\n  const seconds = addZero(t.seconds);\r\n  let output = '';\r\n  if (t.days && !output) {\r\n    output = `${t.days}:${addZero(t.hours)}:${addZero(t.minutes)}:${seconds}`;\r\n  }\r\n  if (t.hours && !output) {\r\n    output = `${addZero(t.hours, addZeroToFirstUnit)}:${addZero(\r\n      t.minutes,\r\n    )}:${seconds}`;\r\n  }\r\n  if (!output) {\r\n    output = `${addZero(t.minutes, addZeroToFirstUnit)}:${seconds}`;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction addZero(v: number, addZero = true) {\r\n  if (!addZero) return v;\r\n  let value = `${v}`;\r\n  if (value.length === 1) {\r\n    value = '0' + value;\r\n  }\r\n  return value;\r\n}\r\n","import {HeaderCardData} from '@common/admin/analytics/use-admin-report';\r\nimport React, {\r\n  cloneElement,\r\n  Fragment,\r\n  isValidElement,\r\n  ReactElement,\r\n  ReactNode,\r\n} from 'react';\r\nimport {TrendingUpIcon} from '@ui/icons/material/TrendingUp';\r\nimport {TrendingDownIcon} from '@ui/icons/material/TrendingDown';\r\nimport {createSvgIconFromTree, IconTree} from '@ui/icons/create-svg-icon';\r\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\r\nimport {FormattedBytes} from '@ui/i18n/formatted-bytes';\r\nimport {TrendingFlatIcon} from '@ui/icons/material/TrendingFlat';\r\nimport {AnimatePresence, m} from 'framer-motion';\r\nimport {opacityAnimation} from '@ui/animation/opacity-animation';\r\nimport {Skeleton} from '@ui/skeleton/skeleton';\r\nimport {SvgIconProps} from '@ui/icons/svg-icon';\r\nimport clsx from 'clsx';\r\nimport {Trans} from '@ui/i18n/trans';\r\nimport {FormattedDuration} from '@ui/i18n/formatted-duration';\r\n\r\ninterface AdminHeaderReportProps {\r\n  report?: HeaderCardData[];\r\n  isLoading?: boolean;\r\n}\r\nexport function AdminReportCardRow({\r\n  report,\r\n  isLoading,\r\n}: AdminHeaderReportProps) {\r\n  if (!report) return <div className=\"col-span-12 row-span-3\" />;\r\n  return (\r\n    <Fragment>\r\n      {report?.map(data => (\r\n        <ReportCard\r\n          key={data.name}\r\n          icon={data.icon}\r\n          type={data.type}\r\n          currentValue={data.currentValue}\r\n          previousValue={data.previousValue}\r\n          percentageChange={data.percentageChange}\r\n          isLoading={isLoading}\r\n        >\r\n          <Trans message={data.name} />\r\n        </ReportCard>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\ninterface ReportCardProps {\r\n  icon?: IconTree[] | ReactElement<SvgIconProps>;\r\n  type?: 'number' | 'fileSize' | 'percentage' | 'durationInSeconds';\r\n  currentValue: number | null;\r\n  previousValue?: number | null;\r\n  percentageChange?: number;\r\n  isLoading?: boolean;\r\n  children: ReactNode;\r\n  colSpan?: string;\r\n  rowSpan?: string;\r\n}\r\nexport function ReportCard({\r\n  icon: propsIcon,\r\n  children,\r\n  type,\r\n  currentValue,\r\n  previousValue,\r\n  percentageChange,\r\n  isLoading = false,\r\n  colSpan = 'col-span-3',\r\n  rowSpan = 'row-span-3',\r\n}: ReportCardProps) {\r\n  let icon;\r\n  if (propsIcon) {\r\n    if (isValidElement(propsIcon)) {\r\n      icon = cloneElement(propsIcon, {size: 'sm'});\r\n    } else {\r\n      const IconEl = createSvgIconFromTree(propsIcon);\r\n      icon = <IconEl size=\"sm\" />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'compact-scrollbar flex flex-col justify-between overflow-x-auto overflow-y-hidden whitespace-nowrap rounded-panel border px-20 py-14',\r\n        colSpan,\r\n        rowSpan,\r\n      )}\r\n    >\r\n      <div className=\"flex items-center gap-6\">\r\n        {icon}\r\n        <h2 className=\"text-sm font-semibold\">{children}</h2>\r\n      </div>\r\n      <div className=\"flex gap-10\">\r\n        <div className=\"text-4xl font-medium text-main\">\r\n          <AnimatePresence initial={false} mode=\"wait\">\r\n            {isLoading ? (\r\n              <m.div key=\"skeleton\" {...opacityAnimation}>\r\n                <Skeleton className=\"min-w-40\" />\r\n              </m.div>\r\n            ) : (\r\n              <m.div key=\"value\" {...opacityAnimation}>\r\n                <FormattedValue type={type} value={currentValue} />\r\n              </m.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n        {currentValue != null &&\r\n          (percentageChange != null || previousValue != null) && (\r\n            <div className=\"flex items-center gap-10\">\r\n              <TrendingIndicator\r\n                currentValue={currentValue}\r\n                previousValue={previousValue}\r\n                percentageChange={percentageChange}\r\n              />\r\n            </div>\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormattedValueProps {\r\n  type: ReportCardProps['type'];\r\n  value: ReportCardProps['currentValue'];\r\n}\r\nfunction FormattedValue({type, value}: FormattedValueProps) {\r\n  if (value == null) return '—';\r\n  switch (type) {\r\n    case 'fileSize':\r\n      return <FormattedBytes bytes={value} />;\r\n    case 'percentage':\r\n      return (\r\n        <FormattedNumber\r\n          value={value}\r\n          style=\"percent\"\r\n          maximumFractionDigits={1}\r\n        />\r\n      );\r\n    case 'durationInSeconds':\r\n      return <FormattedDuration seconds={value as number} verbose />;\r\n    default:\r\n      return <FormattedNumber value={value} />;\r\n  }\r\n}\r\n\r\ninterface TrendingIndicatorProps {\r\n  currentValue: number;\r\n  previousValue?: number | null;\r\n  percentageChange?: number;\r\n}\r\nfunction TrendingIndicator(props: TrendingIndicatorProps) {\r\n  const percentage = calculatePercentage(props);\r\n  let icon: ReactElement;\r\n  if (percentage > 0) {\r\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\r\n  } else if (percentage === 0) {\r\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\r\n  } else {\r\n    icon = <TrendingDownIcon className=\"text-danger\" />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {icon}\r\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nfunction calculatePercentage({\r\n  percentageChange,\r\n  previousValue,\r\n  currentValue,\r\n}: TrendingIndicatorProps) {\r\n  if (\r\n    percentageChange != null ||\r\n    previousValue == null ||\r\n    currentValue == null\r\n  ) {\r\n    return percentageChange ?? 0;\r\n  }\r\n\r\n  if (previousValue === 0) {\r\n    return 100;\r\n  }\r\n\r\n  return Math.round(((currentValue - previousValue) / previousValue) * 100);\r\n}\r\n","import {ReactNode, Ref} from 'react';\r\nimport clsx from 'clsx';\r\n\r\nexport interface ChartLayoutProps {\r\n  title: ReactNode;\r\n  description?: ReactNode;\r\n  className?: string;\r\n  children: ReactNode;\r\n  contentIsFlex?: boolean;\r\n  contentClassName?: string;\r\n  contentRef?: Ref<HTMLDivElement>;\r\n  isLoading?: boolean;\r\n}\r\nexport function ChartLayout(props: ChartLayoutProps) {\r\n  const {\r\n    title,\r\n    description,\r\n    children,\r\n    className,\r\n    contentIsFlex = true,\r\n    contentClassName,\r\n    contentRef,\r\n  } = props;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'flex h-full flex-auto flex-col rounded-panel border bg p-20 dark:bg-alt',\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"flex flex-shrink-0 items-center justify-between pb-10 text-xs\">\r\n        <div className=\"text-sm font-semibold\">{title}</div>\r\n        {description && <div className=\"text-muted\">{description}</div>}\r\n      </div>\r\n      <div\r\n        ref={contentRef}\r\n        className={clsx(\r\n          'relative',\r\n          contentIsFlex && 'flex flex-auto items-center justify-center',\r\n          contentClassName,\r\n        )}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {ProgressCircle} from '@ui/progress/progress-circle';\r\nimport {Trans} from '@ui/i18n/trans';\r\n\r\nexport function ChartLoadingIndicator() {\r\n  return (\r\n    <div className=\"absolute mx-auto flex items-center gap-10 text-sm\">\r\n      <ProgressCircle isIndeterminate size=\"sm\" />\r\n      <Trans message=\"Chart loading\" />\r\n    </div>\r\n  );\r\n}\r\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\r\nimport {lazy, Suspense} from 'react';\r\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\nimport clsx from 'clsx';\r\n\r\nconst LazyChart = lazy(() => import('./lazy-chart'));\r\n\r\nexport interface BaseChartProps<Type extends ChartType = ChartType>\r\n  extends Omit<ChartLayoutProps, 'children'> {\r\n  type: Type;\r\n  data: ChartData<Type, unknown>;\r\n  options?: ChartOptions<Type>;\r\n  hideLegend?: boolean;\r\n  rowSpan?: string;\r\n  colSpan?: string;\r\n}\r\nexport function BaseChart<Type extends ChartType = ChartType>(\r\n  props: BaseChartProps<Type>,\r\n) {\r\n  const {\r\n    title,\r\n    description,\r\n    className,\r\n    rowSpan = 'row-span-11',\r\n    colSpan = 'col-span-6',\r\n    contentRef,\r\n    isLoading,\r\n  } = props;\r\n\r\n  return (\r\n    <ChartLayout\r\n      title={title}\r\n      description={description}\r\n      className={clsx(className, rowSpan, colSpan)}\r\n      contentRef={contentRef}\r\n    >\r\n      <Suspense fallback={<ChartLoadingIndicator />}>\r\n        <LazyChart {...props} />\r\n        {isLoading && <ChartLoadingIndicator />}\r\n      </Suspense>\r\n    </ChartLayout>\r\n  );\r\n}\r\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\r\nimport memoize from 'nano-memoize';\r\nimport {ChartType} from 'chart.js';\r\nimport {\r\n  FormattedDatasetItem,\r\n  FormattedReportData,\r\n} from './formatted-dataset-item';\r\nimport {\r\n  DatasetItem,\r\n  RangedDatasetGranularity,\r\n  ReportMetric,\r\n} from '../../admin/analytics/report-metric';\r\nimport {shallowEqual} from '@ui/utils/shallow-equal';\r\n\r\ninterface Options {\r\n  localeCode: string;\r\n  shareFirstDatasetLabels?: boolean;\r\n}\r\n\r\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\r\n\r\nexport function formatReportData(\r\n  report: ReportMetric<DatasetItem> | undefined,\r\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options,\r\n): FormattedReportData {\r\n  if (!report) return {datasets: []};\r\n\r\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\r\n\r\n  return {\r\n    ...report,\r\n    datasets: report.datasets.map((dataset, datasetIndex) => {\r\n      const data = dataset.data.map((datasetItem, itemIndex) => {\r\n        let label: FormattedDatasetLabels;\r\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\r\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\r\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\r\n          label = generateDatasetLabels(\r\n            datasetItem,\r\n            report.granularity,\r\n            localeCode,\r\n          );\r\n          firstDatasetLabels[itemIndex] = label;\r\n        } else {\r\n          label = firstDatasetLabels[itemIndex];\r\n        }\r\n        return {\r\n          ...label,\r\n          value: datasetItem.value,\r\n        };\r\n      });\r\n\r\n      return {...dataset, data};\r\n    }),\r\n  };\r\n}\r\n\r\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\r\n  datum: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined,\r\n  locale: string,\r\n): FormattedDatasetLabels {\r\n  if (datum.label) {\r\n    return {label: datum.label};\r\n  }\r\n\r\n  if (!datum.date) {\r\n    return {label: ''};\r\n  }\r\n\r\n  return generateTimeLabels(datum, granularity, locale);\r\n}\r\n\r\nfunction generateTimeLabels(\r\n  {date: isoDate, endDate: isoEndDate}: DatasetItem,\r\n  granularity: RangedDatasetGranularity | undefined = 'day',\r\n  locale: string,\r\n): Omit<FormattedDatasetItem, 'value'> {\r\n  const date = parseAbsoluteToLocal(isoDate!).toDate();\r\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\r\n\r\n  switch (granularity) {\r\n    case 'minute':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          second: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n          second: '2-digit',\r\n        }).format(date),\r\n      };\r\n    case 'hour':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n          hour: 'numeric',\r\n          minute: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'day':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          weekday: 'short',\r\n          month: 'short',\r\n        }).format(date),\r\n      };\r\n    case 'week':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          day: '2-digit',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          day: '2-digit',\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).formatRange(date, endDate as Date),\r\n      };\r\n    case 'month':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          month: 'short',\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          month: 'long',\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n    case 'year':\r\n      return {\r\n        label: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n        tooltipTitle: getFormatter(locale, {\r\n          year: 'numeric',\r\n        }).format(date),\r\n      };\r\n  }\r\n}\r\n\r\nconst getFormatter = memoize(\r\n  (locale, options: Intl.DateTimeFormatOptions) => {\r\n    return new DateFormatter(locale, options);\r\n  },\r\n  {\r\n    equals: (a, b) => {\r\n      return shallowEqual(a, b);\r\n    },\r\n    callTimeout: undefined as any,\r\n  },\r\n);\r\n","import {getBootstrapData} from '@ui/bootstrap-data/bootstrap-data-store';\r\n\r\nconst primaryColor = getBootstrapData().themes[0].values['--be-primary'];\r\nexport const ChartColors = [\r\n  [\r\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\r\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\r\n  ],\r\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\r\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\r\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\r\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\r\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\r\n];\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\n\r\nconst LineChartOptions: ChartOptions<'line'> = {\r\n  parsing: {\r\n    xAxisKey: 'label',\r\n    yAxisKey: 'value',\r\n  },\r\n  datasets: {\r\n    line: {\r\n      fill: 'origin',\r\n      tension: 0.1,\r\n      pointBorderWidth: 4,\r\n      pointHitRadius: 10,\r\n    },\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: false,\r\n      mode: 'index',\r\n    },\r\n  },\r\n};\r\n\r\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function LineChart({data, ...props}: LineChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors[i][1],\r\n        borderColor: ChartColors[i][0],\r\n        pointBackgroundColor: ChartColors[i][0],\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      {...props}\r\n      data={formattedData}\r\n      type=\"line\"\r\n      options={LineChartOptions}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\n\r\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\r\n  parsing: {\r\n    key: 'value',\r\n  },\r\n  plugins: {\r\n    tooltip: {\r\n      intersect: true,\r\n    },\r\n  },\r\n};\r\n\r\ninterface PolarAreaChartProps\r\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function PolarAreaChart({\r\n  data,\r\n  className,\r\n  ...props\r\n}: PolarAreaChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: ChartColors.map(c => c[1]),\r\n        borderColor: ChartColors.map(c => c[0]),\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"polarArea\"\r\n      data={formattedData}\r\n      options={PolarAreaChartOptions}\r\n      className={className}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import {BaseChart, BaseChartProps} from './base-chart';\r\nimport {ChartData, ChartOptions} from 'chart.js';\r\nimport {ChartColors} from './chart-colors';\r\nimport {useSelectedLocale} from '@ui/i18n/selected-locale';\r\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\r\nimport {useMemo} from 'react';\r\nimport {formatReportData} from './data/format-report-data';\r\nimport {DatasetItem, ReportMetric} from '../admin/analytics/report-metric';\r\n\r\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\r\n  direction?: 'horizontal' | 'vertical';\r\n  individualBarColors?: boolean;\r\n  data?: ReportMetric<DatasetItem>;\r\n}\r\nexport function BarChart({\r\n  data,\r\n  direction = 'vertical',\r\n  individualBarColors = false,\r\n  className,\r\n  ...props\r\n}: BarChartProps) {\r\n  const {localeCode} = useSelectedLocale();\r\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\r\n    useMemo(() => {\r\n      const formattedData = formatReportData(data, {localeCode});\r\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\r\n        ...dataset,\r\n        backgroundColor: individualBarColors\r\n          ? ChartColors.map(c => c[1])\r\n          : ChartColors[i][1],\r\n        borderColor: individualBarColors\r\n          ? ChartColors.map(c => c[0])\r\n          : ChartColors[i][0],\r\n        borderWidth: 2,\r\n      }));\r\n      return formattedData;\r\n    }, [data, localeCode, individualBarColors]);\r\n\r\n  const isHorizontal = direction === 'horizontal';\r\n  const options: ChartOptions<'bar'> = useMemo(() => {\r\n    return {\r\n      indexAxis: isHorizontal ? 'y' : 'x',\r\n      parsing: {\r\n        xAxisKey: isHorizontal ? 'value' : 'label',\r\n        yAxisKey: isHorizontal ? 'label' : 'value',\r\n      },\r\n    };\r\n  }, [isHorizontal]);\r\n\r\n  return (\r\n    <BaseChart\r\n      type=\"bar\"\r\n      className={className}\r\n      data={formattedData}\r\n      options={options}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n","import lazyLoader from '@ui/utils/loaders/lazy-loader';\r\nimport {useSettings} from '@ui/settings/use-settings';\r\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\r\nimport {useThemeSelector} from '@ui/themes/theme-selector-context';\r\nimport {themeValueToHex} from '@ui/themes/utils/theme-value-to-hex';\r\nimport {useTrans} from '@ui/i18n/use-trans';\r\nimport {message} from '@ui/i18n/message';\r\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\r\n\r\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\r\n\r\ninterface UseGoogleGeoChartProps {\r\n  placeholderRef: RefObject<HTMLDivElement>;\r\n  data: LocationDatasetItem[];\r\n  onCountrySelected?: (countryCode: string) => void;\r\n  country?: string;\r\n}\r\nexport function useGoogleGeoChart({\r\n  placeholderRef,\r\n  data,\r\n  country,\r\n  onCountrySelected,\r\n}: UseGoogleGeoChartProps) {\r\n  const {trans} = useTrans();\r\n  const {analytics} = useSettings();\r\n  const apiKey = analytics?.gchart_api_key;\r\n  const {selectedTheme} = useThemeSelector();\r\n  const geoChartRef = useRef<google.visualization.GeoChart>();\r\n  // only allow selecting countries, not cities\r\n  const regionInteractivity = !!onCountrySelected && !country;\r\n  const drawGoogleChart = useCallback(() => {\r\n    if (typeof google === 'undefined') return;\r\n\r\n    const seedData = data.map(location => [location.label, location.value]);\r\n    seedData.unshift([\r\n      country ? trans(message('City')) : trans(message('Country')),\r\n      trans(message('Clicks')),\r\n    ]);\r\n\r\n    const backgroundColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-paper'],\r\n    )}`;\r\n    const chartColor = `${themeValueToHex(\r\n      selectedTheme.values['--be-primary'],\r\n    )}`;\r\n\r\n    const options: google.visualization.GeoChartOptions = {\r\n      colorAxis: {colors: [chartColor]},\r\n      backgroundColor,\r\n      region: country ? country.toUpperCase() : undefined,\r\n      resolution: country ? 'provinces' : 'countries',\r\n      displayMode: country ? 'markers' : 'regions',\r\n      enableRegionInteractivity: regionInteractivity,\r\n    };\r\n\r\n    if (\r\n      !geoChartRef.current &&\r\n      placeholderRef.current &&\r\n      google?.visualization?.GeoChart\r\n    ) {\r\n      geoChartRef.current = new google.visualization.GeoChart(\r\n        placeholderRef.current,\r\n      );\r\n    }\r\n    geoChartRef.current?.draw(\r\n      google.visualization.arrayToDataTable(seedData),\r\n      options,\r\n    );\r\n  }, [\r\n    selectedTheme,\r\n    data,\r\n    placeholderRef,\r\n    trans,\r\n    country,\r\n    regionInteractivity,\r\n  ]);\r\n\r\n  const initGoogleGeoChart = useCallback(async () => {\r\n    if (lazyLoader.isLoadingOrLoaded(loaderUrl)) return;\r\n    await lazyLoader.loadAsset(loaderUrl, {type: 'js', id: 'google-charts-js'});\r\n    await google.charts.load('current', {\r\n      packages: ['geochart'],\r\n      mapsApiKey: apiKey,\r\n    });\r\n    drawGoogleChart();\r\n  }, [apiKey, drawGoogleChart]);\r\n\r\n  useEffect(() => {\r\n    if (geoChartRef.current && onCountrySelected) {\r\n      google.visualization.events.addListener(\r\n        geoChartRef.current,\r\n        'regionClick',\r\n        (a: {region: string}) => onCountrySelected?.(a.region),\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (geoChartRef.current) {\r\n        google.visualization.events.removeAllListeners(geoChartRef.current);\r\n      }\r\n    };\r\n    // this will correctly run when geochart instance is set on ref\r\n  }, [onCountrySelected, geoChartRef.current]);\r\n\r\n  // on component load: load chart library then draw, otherwise just draw\r\n  useEffect(() => {\r\n    initGoogleGeoChart();\r\n  }, [initGoogleGeoChart]);\r\n\r\n  // redraw chart if data or theme changes\r\n  useEffect(() => {\r\n    drawGoogleChart();\r\n  }, [selectedTheme, drawGoogleChart, data]);\r\n\r\n  return {drawGoogleChart};\r\n}\r\n","import {createSvgIcon} from '@ui/icons/create-svg-icon';\r\n\r\nexport const InfoDialogTriggerIcon = createSvgIcon(\r\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\r\n  'InfoDialogTrigger',\r\n);\r\n","import {IconButton} from '@ui/buttons/icon-button';\r\nimport {InfoDialogTriggerIcon} from '@ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\r\nimport {Dialog, DialogSize} from '@ui/overlays/dialog/dialog';\r\nimport {DialogHeader} from '@ui/overlays/dialog/dialog-header';\r\nimport {DialogBody} from '@ui/overlays/dialog/dialog-body';\r\nimport {DialogTrigger} from '@ui/overlays/dialog/dialog-trigger';\r\nimport React, {ReactNode} from 'react';\r\nimport clsx from 'clsx';\r\n\r\ninterface Props {\r\n  title?: ReactNode;\r\n  body: ReactNode;\r\n  dialogSize?: DialogSize;\r\n  className?: string;\r\n}\r\nexport function InfoDialogTrigger({\r\n  title,\r\n  body,\r\n  dialogSize = 'sm',\r\n  className,\r\n}: Props) {\r\n  return (\r\n    <DialogTrigger type=\"popover\" triggerOnHover>\r\n      <IconButton\r\n        className={clsx('ml-4 text-muted opacity-70', className)}\r\n        iconSize=\"xs\"\r\n        size=\"2xs\"\r\n      >\r\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\r\n      </IconButton>\r\n      <Dialog size={dialogSize}>\r\n        {title && (\r\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\r\n            {title}\r\n          </DialogHeader>\r\n        )}\r\n        <DialogBody>{body}</DialogBody>\r\n      </Dialog>\r\n    </DialogTrigger>\r\n  );\r\n}\r\n","import {useSelectedLocale} from '@ui/i18n/selected-locale';\r\nimport {Fragment, memo} from 'react';\r\n\r\ninterface Props {\r\n  code: string;\r\n}\r\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\r\n  const {localeCode} = useSelectedLocale();\r\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\r\n  let formattedName: string | undefined;\r\n\r\n  try {\r\n    formattedName = regionNames.of(countryCode.toUpperCase());\r\n  } catch (e) {}\r\n\r\n  return <Fragment>{formattedName}</Fragment>;\r\n});\r\n","import {\r\n  LocationDatasetItem,\r\n  ReportMetric,\r\n} from '@common/admin/analytics/report-metric';\r\nimport React, {useMemo, useRef} from 'react';\r\nimport {useGoogleGeoChart} from './use-google-geo-chart';\r\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\r\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\r\nimport {Button} from '@ui/buttons/button';\r\nimport {ArrowBackIcon} from '@ui/icons/material/ArrowBack';\r\nimport clsx from 'clsx';\r\nimport {InfoDialogTrigger} from '@ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\r\nimport {Trans} from '@ui/i18n/trans';\r\nimport {FormattedCountryName} from '@ui/i18n/formatted-country-name';\r\n\r\ninterface GeoChartData extends Partial<ChartLayoutProps> {\r\n  data?: ReportMetric<LocationDatasetItem>;\r\n  onCountrySelected?: (countryCode: string | undefined) => void;\r\n  country?: string;\r\n  colSpan?: string;\r\n  rowSpan?: string;\r\n}\r\nexport function GeoChart({\r\n  data: metricData,\r\n  isLoading,\r\n  onCountrySelected,\r\n  country,\r\n  className,\r\n  colSpan = 'col-span-7',\r\n  rowSpan = 'row-span-11',\r\n  ...layoutProps\r\n}: GeoChartData) {\r\n  const placeholderRef = useRef<HTMLDivElement>(null);\r\n  const regionInteractivity = !!onCountrySelected;\r\n\r\n  // memo data to avoid redrawing chart on rerender\r\n  const initialData = metricData?.datasets[0].data;\r\n  const data = useMemo(() => {\r\n    return initialData || [];\r\n  }, [initialData]);\r\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\r\n\r\n  return (\r\n    <ChartLayout\r\n      {...layoutProps}\r\n      className={clsx(\r\n        className,\r\n        colSpan,\r\n        rowSpan,\r\n        'compact-scrollbar overflow-x-auto overflow-y-hidden',\r\n      )}\r\n      title={\r\n        <div className=\"flex items-center\">\r\n          <Trans message=\"Top Locations\" />\r\n          {country ? (\r\n            <span className=\"pl-4\">\r\n              ({<FormattedCountryName code={country} />})\r\n            </span>\r\n          ) : null}\r\n          {regionInteractivity && <InfoTrigger />}\r\n        </div>\r\n      }\r\n      contentIsFlex={isLoading}\r\n    >\r\n      {isLoading && <ChartLoadingIndicator />}\r\n      <div className=\"flex gap-24\">\r\n        <div\r\n          ref={placeholderRef}\r\n          className=\"min-h-[340px] w-[480px] flex-auto\"\r\n        />\r\n        <div className=\"w-[170px]\">\r\n          <div className=\"max-h-[340px] w-full flex-initial overflow-y-auto text-sm\">\r\n            {data.map(location => (\r\n              <div\r\n                key={location.label}\r\n                className={clsx(\r\n                  'mb-4 flex items-center gap-4',\r\n                  regionInteractivity && 'cursor-pointer hover:underline',\r\n                )}\r\n                role={regionInteractivity ? 'button' : undefined}\r\n                onClick={() => {\r\n                  onCountrySelected?.(location.code);\r\n                }}\r\n              >\r\n                <div className=\"max-w-110 overflow-hidden overflow-ellipsis whitespace-nowrap\">\r\n                  {location.label}\r\n                </div>\r\n                <div>({location.percentage})%</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {country && (\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              className=\"mt-14\"\r\n              startIcon={<ArrowBackIcon />}\r\n              onClick={() => {\r\n                onCountrySelected?.(undefined);\r\n              }}\r\n            >\r\n              <Trans message=\"Back to countries\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </ChartLayout>\r\n  );\r\n}\r\n\r\nfunction InfoTrigger() {\r\n  return (\r\n    <InfoDialogTrigger\r\n      title={<Trans message=\"Zooming in\" />}\r\n      body={\r\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport {LineChart} from '@common/charts/line-chart';\r\nimport {Trans} from '@ui/i18n/trans';\r\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\r\nimport {BarChart} from '@common/charts/bar-chart';\r\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\r\nimport {FormattedNumber} from '@ui/i18n/formatted-number';\r\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\r\n\r\ninterface AdminReportChartsProps {\r\n  report?: VisitorsReportData;\r\n  isLoading: boolean;\r\n}\r\nexport function VisitorsReportCharts({\r\n  report,\r\n  isLoading,\r\n}: AdminReportChartsProps) {\r\n  const totalViews = report?.pageViews.total;\r\n  return (\r\n    <Fragment>\r\n      <LineChart\r\n        colSpan=\"col-span-8\"\r\n        isLoading={isLoading}\r\n        data={report?.pageViews}\r\n        title={<Trans message=\"Pageviews\" />}\r\n        description={\r\n          totalViews ? (\r\n            <Trans\r\n              message=\":count total views\"\r\n              values={{count: <FormattedNumber value={totalViews} />}}\r\n            />\r\n          ) : null\r\n        }\r\n      />\r\n      <PolarAreaChart\r\n        colSpan=\"col-span-4\"\r\n        isLoading={isLoading}\r\n        data={report?.devices}\r\n        title={<Trans message=\"Top devices\" />}\r\n      />\r\n      <GeoChart\r\n        colSpan=\"col-span-7\"\r\n        isLoading={isLoading}\r\n        data={report?.locations}\r\n        title={<Trans message=\"Top locations\" />}\r\n      />\r\n      <BarChart\r\n        colSpan=\"col-span-5\"\r\n        isLoading={isLoading}\r\n        data={report?.browsers}\r\n        direction=\"horizontal\"\r\n        individualBarColors\r\n        hideLegend\r\n        title={<Trans message=\"Top browsers\" />}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n","import {useDateRangePickerState} from '@ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\r\nimport {DialogTrigger} from '@ui/overlays/dialog/dialog-trigger';\r\nimport {Button} from '@ui/buttons/button';\r\nimport {DateRangeIcon} from '@ui/icons/material/DateRange';\r\nimport {FormattedDateTimeRange} from '@ui/i18n/formatted-date-time-range';\r\nimport {DateRangeDialog} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\r\nimport React from 'react';\r\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {useIsMobileMediaQuery} from '@ui/utils/hooks/is-mobile-media-query';\r\nimport {DateFormatPresets} from '@ui/i18n/formatted-date';\r\nimport {DateRangeComparePresets} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-compare-presets';\r\nimport {Granularity} from '@ui/forms/input-field/date/date-picker/use-date-picker-state';\r\n\r\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\r\n  month: 'short',\r\n  day: '2-digit',\r\n};\r\n\r\ninterface ReportDataSelectorProps {\r\n  value: DateRangeValue;\r\n  disabled?: boolean;\r\n  onChange: (value: DateRangeValue) => void;\r\n  compactOnMobile?: boolean;\r\n  enableCompare?: boolean;\r\n  granularity?: Granularity;\r\n}\r\nexport function ReportDateSelector({\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  compactOnMobile = true,\r\n  enableCompare = false,\r\n  granularity = 'minute',\r\n}: ReportDataSelectorProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  return (\r\n    <DialogTrigger\r\n      type=\"popover\"\r\n      onClose={value => {\r\n        if (value) {\r\n          onChange(value);\r\n        }\r\n      }}\r\n    >\r\n      <Button\r\n        variant=\"outline\"\r\n        color=\"chip\"\r\n        endIcon={<DateRangeIcon />}\r\n        disabled={disabled}\r\n      >\r\n        <FormattedDateTimeRange\r\n          start={value.start}\r\n          end={value.end}\r\n          options={\r\n            isMobile && compactOnMobile\r\n              ? monthDayFormat\r\n              : DateFormatPresets.short\r\n          }\r\n        />\r\n      </Button>\r\n      <DateSelectorDialog\r\n        value={value}\r\n        enableCompare={enableCompare}\r\n        granularity={granularity}\r\n      />\r\n    </DialogTrigger>\r\n  );\r\n}\r\n\r\ninterface DateSelectorDialogProps {\r\n  value: DateRangeValue;\r\n  enableCompare: boolean;\r\n  granularity: Granularity;\r\n}\r\nfunction DateSelectorDialog({\r\n  value,\r\n  enableCompare,\r\n  granularity,\r\n}: DateSelectorDialogProps) {\r\n  const isMobile = useIsMobileMediaQuery();\r\n  const state = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: {\r\n      start: value.start,\r\n      end: value.end,\r\n      preset: value.preset,\r\n    },\r\n    closeDialogOnSelection: false,\r\n  });\r\n  const compareHasInitialValue = !!value.compareStart && !!value.compareEnd;\r\n  const compareState = useDateRangePickerState({\r\n    granularity,\r\n    defaultValue: compareHasInitialValue\r\n      ? {\r\n          start: value.compareStart,\r\n          end: value.compareEnd,\r\n          preset: value.comparePreset,\r\n        }\r\n      : DateRangeComparePresets[0].getRangeValue(state.selectedValue),\r\n  });\r\n  return (\r\n    <DateRangeDialog\r\n      state={state}\r\n      compareState={enableCompare ? compareState : undefined}\r\n      compareVisibleDefault={compareHasInitialValue}\r\n      showInlineDatePickerField={!isMobile}\r\n    />\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useAdminReport} from './use-admin-report';\r\nimport {Trans} from '@ui/i18n/trans';\r\nimport {StaticPageTitle} from '../../seo/static-page-title';\r\nimport {AdminReportCardRow} from '@common/admin/analytics/admin-report-card-row';\r\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\r\nimport {DateRangeValue} from '@ui/forms/input-field/date/date-range-picker/date-range-value';\r\nimport {DateRangePresets} from '@ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\r\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\r\n\r\nexport function Component() {\r\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\r\n    // This week\r\n    return DateRangePresets[2].getRangeValue();\r\n  });\r\n  const {isLoading, data} = useAdminReport({dateRange});\r\n  const title = <Trans message=\"Visitors report\" />;\r\n\r\n  return (\r\n    <div className=\"min-h-full gap-12 overflow-x-hidden p-12 md:gap-18 md:p-18\">\r\n      <div className=\"mb-24 items-center justify-between gap-24 md:flex\">\r\n        <StaticPageTitle>{title}</StaticPageTitle>\r\n        <h1 className=\"mb-24 text-3xl font-light md:mb-0\">{title}</h1>\r\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\r\n      </div>\r\n      <div className=\"chart-grid\">\r\n        <AdminReportCardRow report={data?.headerReport} />\r\n        <VisitorsReportCharts\r\n          report={data?.visitorsReport}\r\n          isLoading={isLoading}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"file":"assets/admin-report-page-89582edc.js"}